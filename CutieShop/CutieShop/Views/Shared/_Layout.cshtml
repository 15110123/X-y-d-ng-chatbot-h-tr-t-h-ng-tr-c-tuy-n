@using Microsoft.AspNetCore.Http.Extensions

@{
    var isRoot = Context.Request.GetEncodedPathAndQuery() == "/";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - CutieShop</title>
    <base href="~/" />
    @if (isRoot)
    {
        <!--Motion vector code-->
        <style>
            #react-app {
                display: none;
            }

            #animation_container {
                position: absolute;
                margin: auto;
                left: 0;
                right: 0;
                top: 0;
                bottom: 0;
            }
        </style>
        <script src="https://code.createjs.com/createjs-2015.11.26.min.js"></script>
        <script src="js/splashscreen.js" asp-append-version="true"></script>
        <script>
            var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation;

            function init() {
                canvas = document.getElementById("canvas");
                anim_container = document.getElementById("animation_container");
                dom_overlay_container = document.getElementById("dom_overlay_container");
                var comp = AdobeAn.getComposition("DD8F6665D767D6448078BEA430C50DEC");
                var lib = comp.getLibrary();
                handleComplete({}, comp);
            }

            function handleComplete(evt, comp) {
                //This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
                var lib = comp.getLibrary();
                var ss = comp.getSpriteSheet();
                exportRoot = new lib.main();
                stage = new lib.Stage(canvas);
                //Registers the "tick" event listener.
                fnStartAnimation = function () {
                    stage.addChild(exportRoot);
                    createjs.Ticker.setFPS(lib.properties.fps);
                    createjs.Ticker.addEventListener("tick", stage);
                }

                //Code to support hidpi screens and responsive scaling.
                function makeResponsive(isResp, respDim, isScale, scaleType) {
                    var lastW, lastH, lastS = 1;
                    window.addEventListener('resize', resizeCanvas);
                    resizeCanvas();

                    function resizeCanvas() {
                        var w = lib.properties.width, h = lib.properties.height;
                        var iw = window.innerWidth, ih = window.innerHeight;
                        var pRatio = window.devicePixelRatio || 1, xRatio = iw / w, yRatio = ih / h, sRatio = 1;
                        if (isResp) {
                            if ((respDim == 'width' && lastW == iw) || (respDim == 'height' && lastH == ih)) {
                                sRatio = lastS;
                            } else if (!isScale) {
                                if (iw < w || ih < h)
                                    sRatio = Math.min(xRatio, yRatio);
                            } else if (scaleType == 1) {
                                sRatio = Math.min(xRatio, yRatio);
                            } else if (scaleType == 2) {
                                sRatio = Math.max(xRatio, yRatio);
                            }
                        }
                        canvas.width = w * pRatio * sRatio;
                        canvas.height = h * pRatio * sRatio;
                        canvas.style.width = dom_overlay_container.style.width = anim_container.style.width =
                            w * sRatio + 'px';
                        canvas.style.height = anim_container.style.height = dom_overlay_container.style.height =
                            h * sRatio + 'px';
                        stage.scaleX = pRatio * sRatio;
                        stage.scaleY = pRatio * sRatio;
                        lastW = iw;
                        lastH = ih;
                        lastS = sRatio;
                        stage.tickOnUpdate = false;
                        stage.update();
                        stage.tickOnUpdate = true;
                    }
                }

                makeResponsive(true, 'both', true, 1);
                AdobeAn.compositionLoaded(lib.properties.id);
                fnStartAnimation();
            }
        </script>
    }
    else
    {
        <script>
            function init() { };
        </script>
    }
    <link rel="stylesheet" href="~/dist/vendor.css" asp-append-version="true" />
    <environment exclude="Development">
        <link rel="stylesheet" href="~/dist/site.css" asp-append-version="true" />
    </environment>
    <link rel="stylesheet" href="css/fontawesome-all.min.css"/>
    <script type="text/javascript" src="js/jquery-3.3.1.min.js"></script>
</head>
<body style="margin: 0;" onload="init();">
@{
    if (isRoot)
    {
        <div id="animation_container" style="background-color: rgba(255, 255, 255, 1.00); width: 893px; height: 400px; z-index: 10">
            <canvas id="canvas" width="893" height="400" style="position: absolute; display: block; background-color: rgba(255, 255, 255, 1.00);"></canvas>
            <div id="dom_overlay_container" style="pointer-events: none; overflow: hidden; width: 893px; height: 400px; position: absolute; left: 0px; top: 0px; display: block;">
            </div>
        </div>
    }
}
    @RenderBody()
<script src="~/dist/vendor.js" asp-append-version="true"></script>
@RenderSection("scripts", required: false)
</body>
</html>
